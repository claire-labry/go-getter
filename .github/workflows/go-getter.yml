# todo: go through entire workflow file and comment what each line means
# todo: fix << parameters.go-version >> look into contexts
# todo: ensure go-tests run properly

name: go-getter

on: [push]

env:
  TEST_RESULTS_PATH: /tmp/test-results
  # might have to use datadog metrics here  
  WIN_TEST_RESULTS: c:\Users\circleci\AppData\Local\Temp\test-results

jobs:

  linux-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        # need to double check if we need to programmatically update go version or have latest here
        go: ['1.15.13', '1.14.15']
    
    name: linux-tests ${{ matrix.go }} 
    steps:
      
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go-version}}

      - name: Setup go mod cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Check go fmt output because it does not report non-zero when there are fmt changes
      - name: check go fmt
        run: |
          go fmt ./...
          files=$(go fmt ./...)
            if [ -n "$files" ]; then
              echo "The following file(s) do not conform to go fmt:"
              echo "$files"
              exit 1
            fi

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@v1.7.0
      
      - name: mkdir test results path
        run: mkdir -p ${{env.TEST_RESULTS_PATH}}

      - name: go mod download
        run: go mod download

      - name: Run go tests 
        run: |
          PACKAGE_NAMES=$(go list ./...)
          echo "Running $(echo $PACKAGE_NAMES | wc -w) packages"
          echo $PACKAGE_NAMES
          gotestsum --format=short-verbose --junitfile $TEST_RESULTS_PATH/go-getter/gotestsum-report.xml -- -p 2 -cover -race -vet=on -coverprofile=linux_cov_*.part $PACKAGE_NAMES
      
      # Save coverage report parts
      - name: persist to workspace
        uses: actions/upload-artifact@v3
        with:
          path: linux_cov_*.part

  windows-tests:
    runs-on: windows-latest
    strategy:
      matrix:
        goos: [windows]
        # need to double check if we need to programmatically update go version or have latest here
        go: ['1.15.13', '1.14.15']
      fail-fast: true
    name: windows-tests ${{ matrix.go }}
    steps:
      - name: run git config
        run: git config --global core.autocrlf false

      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go-version}}

      - name: Setup go mod cache
        uses: actions/cache@v3
        with:
          path: |
            /go
            c:\Windows\system32\config\systemprofile\go\pkg\mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: download go modules
        run: go mod download
          
      - name: install gotestsum
        run: go install gotest.tools/gotestsum@v1.7.0
      
      - name: run go tests
        shell: bash
        run: |
          PACKAGE_NAMES=$(go list ./...)
          echo "Running $(echo $PACKAGE_NAMES | wc -w) packages"
          echo $PACKAGE_NAMES
          gotestsum --format=short-verbose --junitfile $TEST_RESULTS_PATH/go-getter/gotestsum-report.xml -- -p 2 -cover -race -vet=off -coverprofile=win_cov_*.part $PACKAGE_NAMES
      
      # Save coverage report parts
      - name: persist to workspace
        uses: actions/upload-artifact@v3
        with:
          path: win_cov_*.part
    